import streamlit as st
import requests
import json

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
OLLAMA_API_BASE = "http://localhost:11434"  # –õ–æ–∫–∞–ª—å–Ω—ã–π Ollama —Å–µ—Ä–≤–µ—Ä
MODEL_NAME = "llama3:instruct"

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã ---
def get_weather(city: str) -> str:
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200:
            temp = data["main"]["temp"]
            feels_like = data["main"]["feels_like"]
            description = data["weather"][0]["description"]
            humidity = data["main"]["humidity"]
            return f"–í –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å {temp:.1f}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like:.1f}¬∞C. {description.capitalize()}. –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%."
        else:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}. –û—à–∏–±–∫–∞: {data.get('message', 'Unknown error')}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {str(e)}"

# --- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ—Ö–æ–∂–µ–º –Ω–∞ OpenAI) ---
tools = [
    {
        "type": "function",
        "function": {
            "name": "get_weather",
            "description": "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ",
            "parameters": {
                "type": "object",
                "properties": {
                    "city": {
                        "type": "string",
                        "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞, Berlin, Tokyo"
                    }
                },
                "required": ["city"]
            }
        }
    }
]

# --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ tool calling —á–µ—Ä–µ–∑ Ollama ---
def format_messages_with_tools(messages, tools):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Ollama —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π tools.
    Ollama –ø–æ–Ω–∏–º–∞–µ—Ç –ø–æ–ª–µ 'tools' –∏ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏.
    """
    return {
        "model": MODEL_NAME,
        "messages": messages,
        "tools": tools,
        "stream": False
    }

def call_ollama(messages, tools=None):
    payload = {
        "model": MODEL_NAME,
        "messages": messages,
        "format": "json" if tools else None,  # –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç
    }
    if tools:
        payload["tools"] = tools

    try:
        response = requests.post(f"{OLLAMA_API_BASE}/api/chat", json=payload)
        response.raise_for_status()
        result = response.json()
        return result["message"]
    except Exception as e:
        return {"role": "assistant", "content": f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Ollama: {str(e)}"}

# --- Streamlit UI ---
st.set_page_config(page_title="üå§Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–≥–æ–¥—ã (Ollama)", page_icon="üå§Ô∏è")
st.title("üå§Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–≥–æ–¥—ã")
st.markdown("–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ **llama3:instruct** —á–µ—Ä–µ–∑ Ollama. –ù–∏–∫–∞–∫–æ–≥–æ –æ–±–ª–∞–∫–∞!")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama ---
try:
    requests.get(OLLAMA_API_BASE)
    st.success("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–Ω–∞")
except:
    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω–∞: `ollama serve`")
    st.stop()

# --- –ö–ª—é—á –æ—Ç OpenWeather ---
OPENWEATHER_API_KEY = st.secrets["OPENWEATHER_API_KEY"]  # –ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

# --- –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
if "messages" not in st.session_state:
    st.session_state.messages = [
        {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢—ã –º–æ–∂–µ—à—å –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏. "
                "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –ø–æ–≥–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç get_weather. "
                "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
            )
        }
    ]

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ---
for msg in st.session_state.messages:
    if msg["role"] in ["user", "assistant"]:
        with st.chat_message(msg["role"]):
            st.write(msg["content"])

# --- –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
if prompt := st.chat_input("–°–ø—Ä–æ—Å–∏—Ç–µ –æ –ø–æ–≥–æ–¥–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ü–∞—Ä–∏–∂–µ?'"):
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.write(prompt)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Ollama
    with st.spinner("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥—É–º–∞–µ—Ç..."):
        response_msg = call_ollama(st.session_state.messages, tools)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        if hasattr(response_msg, "tool_calls") or ("tool_calls" in response_msg and response_msg["tool_calls"]):
            # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ Ollama tool_calls –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –≤–∏–¥–µ dict
            tool_calls = response_msg.get("tool_calls", [])
            st.session_state.messages.append(response_msg)

            available_functions = {"get_weather": get_weather}

            for tool_call in tool_calls:
                function_name = tool_call["function"]["name"]
                if function_name == "get_weather":
                    try:
                        args = json.loads(tool_call["function"]["arguments"])
                        city = args["city"]
                        result = get_weather(city)

                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                        st.session_state.messages.append({
                            "role": "tool",
                            "tool_call_id": tool_call["id"],
                            "name": function_name,
                            "content": result,
                        })
                    except Exception as e:
                        st.session_state.messages.append({
                            "role": "tool",
                            "tool_call_id": tool_call["id"],
                            "name": function_name,
                            "content": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {e}",
                        })

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            final_response = call_ollama(st.session_state.messages)
            st.session_state.messages.append(final_response)
            with st.chat_message("assistant"):
                st.write(final_response["content"])
        else:
            # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            st.session_state.messages.append(response_msg)
            with st.chat_message("assistant"):
                st.write(response_msg["content"])
